new TripsLayer({
  id: 'DRIVER',
  data: DRIVER,
  getPath: d => d.trip,                     // 차량의 전체 이동 경로 (LineString)
  getTimestamps: d => d.timestamp,         // 경로의 시작~끝 시간 (예: [340, 370])
  getColor: d => d.board === 1 ? [255, 153, 51] : [23, 184, 190],  
  // 탑승 중이면 주황색, 빈차이면 파란색 (d.board === 1이 탑승 상태)

  opacity: 0.7,            // 경로의 투명도 (0 ~ 1 사이 값)
  widthMinPixels: 5,       // 경로 선의 최소 두께 (픽셀 단위)
  trailLength: 12,         // 경로 궤적이 몇 초 동안 화면에 남아 있을지 (초 단위)
  currentTime: time,       // 현재 시뮬레이션 시간 (애니메이션 기준 시간)
  shadowEnabled: false     // 그림자 효과 사용 여부 (false로 비활성화)
})

new ScatterplotLayer({
  id: 'driver-marker',
  data: D_MARKER,
  getPosition: d => d,             // 마커 좌표 위치 ([경도, 위도])
  getFillColor: [255, 255, 255],   // 마커 색상 (현재는 흰색)
  getRadius: 3,                    // 마커 반지름 (기본 크기)
  radiusScale: 4,                  // 반지름 크기 배율
  radiusMinPixels: 4,              // 최소 반지름 (픽셀 단위)
  radiusMaxPixels: 8,              // 최대 반지름 (픽셀 단위)
  opacity: 0.5,                    // 투명도
  pickable: false                  // 마우스로 선택 가능 여부 (false는 비활성화)
})

new IconLayer({
  id: 'passenger-marker',
  data: P_MARKER,
  pickable: false,                       // 마우스 선택 비활성화
  iconAtlas: ICON_PNG,                   // 아이콘 이미지가 포함된 PNG 파일
  iconMapping: ICON_MAPPING,             // Atlas 내 아이콘 좌표 지정 정보
  getIcon: d => 'marker',                // 모든 포인트에 'marker' 아이콘 사용
  getPosition: d => d,                   // 마커 위치 좌표
  getSize: d => 10,                      // 아이콘 크기
  getColor: d => [255, 255, 0],          // 아이콘 색상 (노란색)
  sizeScale: 5,                          // 아이콘 크기 배율
  sizeMinPixels: 20,                     // 아이콘 최소 크기 (픽셀)
  sizeMaxPixels: 15                      // 아이콘 최대 크기 (픽셀)
})

const DEFAULT_THEME = {
  trailColor0: [253, 128, 93],     // 사용하지 않음 (구 테마 속성)
  trailColor1: [23, 184, 190],     // 사용하지 않음
  material: {
    ambient: 0.1,                  // 주변광 반사 정도
    diffuse: 0.6,                  // 난반사 정도
    shininess: 32,                 // 광택 강도
    specularColor: [60, 64, 70]    // 반사광 색상
  },
  effects: [lightingEffect]        // 조명 효과 적용 (ambientLight + pointLight)
}

const INITIAL_VIEW_STATE = {
  longitude: 126.9917937,   // 지도 중심 경도
  latitude: 37.5518911,     // 지도 중심 위도
  zoom: 11,                 // 초기 줌 레벨
  minZoom: 2,
  maxZoom: 20,
  pitch: 0,                 // 지도 기울기 (0은 정면에서 보기)
  bearing: 0                // 지도 회전 각도
}

// 조명 효과 설정
const ambientLight = new AmbientLight({
  color: [255, 255, 255],     // 백색광
  intensity: 1.0              // 밝기 정도
});

const pointLight = new PointLight({
  color: [255, 255, 255],     // 백색광
  intensity: 2.0,             // 밝기 정도
  position: [-74.05, 40.7, 8000] // 빛의 위치
});

const lightingEffect = new LightingEffect({ambientLight, pointLight});

// 표면 반사 효과 설정
const material = {
  ambient: 0.1,            // 주변광 반사
  diffuse: 0.6,            // 난반사 비율
  shininess: 32,          // 광택 정도
  specularColor: [60, 64, 70] // 반사광 색상
};

// DeckGL의 전체 시각 효과 및 머터리얼 정의
const DEFAULT_THEME = {
  trailColor0: [253, 128, 93], // 사용 안함
  trailColor1: [23, 184, 190], // 사용 안함
  material,
  effects: [lightingEffect]
};

// 지도 초기 시점 정의
const INITIAL_VIEW_STATE = {
  longitude: 126.9917937,  // 중심 경도
  latitude: 37.5518911,    // 중심 위도
  zoom: 11,                // 초기 줌 레벨
  minZoom: 2,
  maxZoom: 20,
  pitch: 0,                // 지도 기울기
  bearing: 0               // 지도 회전 각도
};

// Mapbox 스타일과 토큰 설정
const mapStyle = 'mapbox://styles/spear5306/ckzcz5m8w002814o2coz02sjc';
const MAPBOX_TOKEN = `pk.eyJ1Ijoic3BlYXI1MzA2IiwiYSI6ImNremN5Z2FrOTI0ZGgycm45Mzh3dDV6OWQifQ.kXGWHPRjnVAEHgVgLzXn2g`; 

// 현재 시간 기준 표시할 마커 데이터 추출 함수
const currData = (data, time) => {
  const arr = [];
  data.forEach(v => {
    const [start, end] = v.timestamp;
    if ((start <= time) & (time <= end)) {
      arr.push(v.location);
    };
  });
  return arr;
}

// 현재 시간 기준 표시할 시뮬레이션 결과 추출 함수
const currResult = (data, time) => {
  const result = data.find(v => Number(v.time) === Math.floor(time));
  return result;
}

// IconLayer용 아이콘 매핑
const ICON_MAPPING = {
  marker: {x: 0, y: 0, width: 128, height: 128, mask: true}
};

const Trip = (props) => {
  const animationSpeed = 5; // 시뮬레이션 속도 배율
  const time = props.time; // 현재 시간
  const minTime = props.minTime; // 시작 시간
  const maxTime = props.maxTime; // 종료 시간
  }